let char = _builtin(char) in
let putchar = _builtin(ml_putchar) in

let ord = _builtin(char_to_int) in
let not = fun b -> if b then false else true in

let self-apply = fun f -> f f in

let expand-product-arg = fun f ->
    fun x -> fun y -> f (x, y) in
let flip = fun f -> fun x -> fun y -> f y x in
let ineg = _builtin(integer_negate) in
let iadd = expand-product-arg _builtin(integer_add) in
let ilt = expand-product-arg _builtin(integer_less) in
let ieq = expand-product-arg _builtin(integer_equal) in
let idiv = flip (expand-product-arg _builtin(integer_divide)) in
let irem = flip (expand-product-arg _builtin(integer_remainder)) in
let imul = expand-product-arg _builtin(integer_multiply) in
let ixor = expand-product-arg _builtin(integer_xor) in
let iand = expand-product-arg _builtin(integer_and) in
let ior = expand-product-arg _builtin(integer_or) in
let iabs = fun x -> (if ilt x 0 then ineg x else x) in
let ipow = fun b -> fun x ->
    if ieq 0 x then 1
    else if ieq (ineg 1) b then if ieq 1 (iand 1 x) then ineg 1 else 1
    else if ilt (iabs b) 2 then b
    else if ilt x 0 then 0
    else self-apply (fun p -> fun x ->
        if ieq 0 x then 1 else imul b (p p (iadd (ineg 1) x))) x in
    
let i64-max = 9223372036854775807 in

let ceq = fun ca -> fun cb -> ieq (ord ca) (ord cb) in
let getchar = fun () -> let c = _builtin(ml_getchar) () in
                if ilt c 0 then >()| else <char c| in

let fst = fun x -> _fst(x) in
let snd = fun x -> _snd(x) in
let error = fun () -> _error in
let ignore = fun x -> () in

let id = fun x -> x in
let nil = >()| in
let cons = fun head -> fun tail ->
    if true then <head, tail|
    else if false then tail else >()| in
let tail = fun list -> switch(list: nonnil -> snd nonnil | u -> nil) in
let head = fun list -> switch(list: nonnil -> fst nonnil | u -> error()) in
let map = fun f -> self-apply (
    fun map2 -> fun list -> switch(list: nn -> cons (f (fst nn)) (map2 map2 (snd nn)) | u -> nil)) in
let len = self-apply (
    fun len2 -> fun list -> switch(list: nn -> iadd 1 (len2 len2 (snd nn)) | nil -> 0) ) in

let cat = fun la -> fun lb -> let cat2 =
    fun cat2 -> fun la -> switch(la: nn -> cons (fst nn) (cat2 cat2 (snd nn)) | nil -> lb) in
    cat2 cat2 la in
let rev =
    let rev2 = fun rev2 -> fun x -> fun y -> switch(y: nn -> rev2 rev2 (cons (fst nn) x) (snd nn)
        | nil -> x) in rev2 rev2 nil in
        
let int2str = fun i ->
    let digit = fun d -> char (iadd 48 d) in
    let i2s2 = fun f -> fun n -> fun str -> 
        if ieq 0 n then str else f f (idiv 10 n) (cons (digit (irem 10 n)) str) in
    let i-div-10 = idiv 10 i in
    let i-rem-10 = irem 10 i in
    if ilt i 0 then cons '-' (i2s2 i2s2 (ineg i-div-10) (cons (digit (ineg i-rem-10)) nil))
               else i2s2 i2s2 i-div-10 (cons (digit i-rem-10) nil) in

let is-digit = fun ch -> let ccode = ord ch in if ilt ccode (ord '0') then false else not (ilt (ord '9') ccode) in
let str2int =
    let found = fun f -> fun n -> fun s -> switch(s: nn -> 
        if is-digit (fst nn) then f f (iadd (imul 10 n) (iadd (ineg (ord '0')) (ord (fst nn)))) (snd nn)
        else n | nil -> n) in
    let s2i2 = fun s2i2 -> fun negative -> fun s ->
        switch(s: nn -> if is-digit (fst nn) then (if negative then ineg else id) (found found 0 s)
                        else s2i2 s2i2 (ceq '-' (fst nn)) (snd nn)
                | nil -> 0) in
    s2i2 s2i2 false in
    
let read-stdin-n = self-apply (fun rs -> fun n -> 
    if ieq n 0 then nil
    else switch(getchar (): c -> cons c (rs rs (iadd (ineg 1) n))
                        | eof -> nil) ) in
let read-stdin = fun () -> read-stdin-n (ineg 1) in
let read-line = fun () -> self-apply (fun rl ->
    switch(getchar (): ch -> if ceq ch (char 10) then nil else cons ch (rl rl)
                    | eof -> nil) ) in

let divisible-power = fun base -> let dp = fun dp -> fun t -> fun n ->
        if ieq 0 (irem base n) then dp dp (iadd 1 t) (idiv base n) else (t, n) in
    dp dp 0 in
let factor = fun n ->
    let nonneg-factors = self-apply (fun f -> fun n -> fun p ->
        if ilt n (imul p p) then if ieq 1 n then nil else cons (n, 1) nil
        else (let exp = divisible-power p n in
             if ieq 0 (fst exp) then f f n (iadd 1 p)
             else cons (p, fst exp) (f f (snd exp) (iadd 1 p)))
    ) (iabs n) 2 in
    if ilt n 0 then cons (ineg 1, 1) nonneg-factors else nonneg-factors in
let gcd = self-apply (fun g -> fun a -> fun b ->
    if ieq 0 a then b else g g (irem a b) a ) in

let delimit = fun delimiter -> fun list ->
    switch(list:
        ht -> cat (fst ht) (self-apply (fun f -> fun l ->
            switch(l:
                nn -> cat delimiter (cat (fst nn) (f f (snd nn)))
                | n -> nil)
            ) (snd ht))
        | n -> nil ) in
